// tslint:disable
/**
 * geoprox-server
 * Geoprox server implementation providing a HTTP API for geospatial queries and position tracking
 *
 * The version of the OpenAPI document: 0.3.1
 * Contact: singhezra@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    CreateIndexResponse,
    DropIndexResponse,
    InsertKey,
    InsertKeyResponse,
    QueryRangeResponse,
    RemoveKey,
} from '../models';

export interface CreateIndexRequest {
    index: string;
}

export interface DropIndexRequest {
    index: string;
}

export interface InsertKeyRequest {
    index: string;
    insertKey: InsertKey;
}

export interface QueryRangeRequest {
    lat: number;
    lng: number;
    range: number;
    index: string;
    count?: number | null;
    sorted?: boolean | null;
}

export interface RemoveKeyRequest {
    index: string;
    removeKey: RemoveKey;
}

/**
 * no description
 */
export class GeoshardApiApi extends BaseAPI {

    /**
     * Creates an in-memory index within this geoshard
     * Create geospatial index
     */
    createIndex({ index }: CreateIndexRequest): Observable<CreateIndexResponse>
    createIndex({ index }: CreateIndexRequest, opts?: OperationOpts): Observable<AjaxResponse<CreateIndexResponse>>
    createIndex({ index }: CreateIndexRequest, opts?: OperationOpts): Observable<CreateIndexResponse | AjaxResponse<CreateIndexResponse>> {
        throwIfNullOrUndefined(index, 'index', 'createIndex');

        return this.request<CreateIndexResponse>({
            url: '/api/v1/shard/{index}'.replace('{index}', encodeURI(index)),
            method: 'POST',
        }, opts?.responseOpts);
    };

    /**
     * Deletes geospatial index, all keys will be lost
     * Drop index
     */
    dropIndex({ index }: DropIndexRequest): Observable<DropIndexResponse>
    dropIndex({ index }: DropIndexRequest, opts?: OperationOpts): Observable<AjaxResponse<DropIndexResponse>>
    dropIndex({ index }: DropIndexRequest, opts?: OperationOpts): Observable<DropIndexResponse | AjaxResponse<DropIndexResponse>> {
        throwIfNullOrUndefined(index, 'index', 'dropIndex');

        return this.request<DropIndexResponse>({
            url: '/api/v1/shard/{index}'.replace('{index}', encodeURI(index)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Inserts key into geospatial index
     * Insert key into index
     */
    insertKey({ index, insertKey }: InsertKeyRequest): Observable<InsertKeyResponse>
    insertKey({ index, insertKey }: InsertKeyRequest, opts?: OperationOpts): Observable<AjaxResponse<InsertKeyResponse>>
    insertKey({ index, insertKey }: InsertKeyRequest, opts?: OperationOpts): Observable<InsertKeyResponse | AjaxResponse<InsertKeyResponse>> {
        throwIfNullOrUndefined(index, 'index', 'insertKey');
        throwIfNullOrUndefined(insertKey, 'insertKey', 'insertKey');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<InsertKeyResponse>({
            url: '/api/v1/shard/{index}'.replace('{index}', encodeURI(index)),
            method: 'PUT',
            headers,
            body: insertKey,
        }, opts?.responseOpts);
    };

    /**
     * Search geospatial index for all keys within some distance
     * Search nearby
     */
    queryRange({ lat, lng, range, index, count, sorted }: QueryRangeRequest): Observable<QueryRangeResponse>
    queryRange({ lat, lng, range, index, count, sorted }: QueryRangeRequest, opts?: OperationOpts): Observable<AjaxResponse<QueryRangeResponse>>
    queryRange({ lat, lng, range, index, count, sorted }: QueryRangeRequest, opts?: OperationOpts): Observable<QueryRangeResponse | AjaxResponse<QueryRangeResponse>> {
        throwIfNullOrUndefined(lat, 'lat', 'queryRange');
        throwIfNullOrUndefined(lng, 'lng', 'queryRange');
        throwIfNullOrUndefined(range, 'range', 'queryRange');
        throwIfNullOrUndefined(index, 'index', 'queryRange');

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'lat': lat,
            'lng': lng,
            'range': range,
        };

        if (count != null) { query['count'] = count; }
        if (sorted != null) { query['sorted'] = sorted; }

        return this.request<QueryRangeResponse>({
            url: '/api/v1/shard/{index}'.replace('{index}', encodeURI(index)),
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Removed key from geospatial index
     * Remove key from index
     */
    removeKey({ index, removeKey }: RemoveKeyRequest): Observable<InsertKeyResponse>
    removeKey({ index, removeKey }: RemoveKeyRequest, opts?: OperationOpts): Observable<AjaxResponse<InsertKeyResponse>>
    removeKey({ index, removeKey }: RemoveKeyRequest, opts?: OperationOpts): Observable<InsertKeyResponse | AjaxResponse<InsertKeyResponse>> {
        throwIfNullOrUndefined(index, 'index', 'removeKey');
        throwIfNullOrUndefined(removeKey, 'removeKey', 'removeKey');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<InsertKeyResponse>({
            url: '/api/v1/shard/{index}'.replace('{index}', encodeURI(index)),
            method: 'PATCH',
            headers,
            body: removeKey,
        }, opts?.responseOpts);
    };

}
