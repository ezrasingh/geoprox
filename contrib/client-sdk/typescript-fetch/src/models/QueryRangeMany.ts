/* tslint:disable */
/* eslint-disable */
/**
 * geoprox-server
 * Geoprox server implementation providing a HTTP API for geospatial queries and position tracking
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: singhezra@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Arguments for group range query
 * @export
 * @interface QueryRangeMany
 */
export interface QueryRangeMany {
    /**
     * Maximum number of neighbors that can be returned (default 100)
     * @type {number}
     * @memberof QueryRangeMany
     */
    count?: number | null;
    /**
     * List of indices to search
     * @type {Array<string>}
     * @memberof QueryRangeMany
     */
    indices: Array<string>;
    /**
     * Latitude
     * @type {number}
     * @memberof QueryRangeMany
     */
    lat: number;
    /**
     * Longitude
     * @type {number}
     * @memberof QueryRangeMany
     */
    lng: number;
    /**
     * Search radius in kilometers
     * @type {number}
     * @memberof QueryRangeMany
     */
    range: number;
    /**
     * If enabled neighbors will be sorted by distance, nearest to furthest (default false)
     * @type {boolean}
     * @memberof QueryRangeMany
     */
    sorted?: boolean | null;
}

/**
 * Check if a given object implements the QueryRangeMany interface.
 */
export function instanceOfQueryRangeMany(value: object): value is QueryRangeMany {
    if (!('indices' in value) || value['indices'] === undefined) return false;
    if (!('lat' in value) || value['lat'] === undefined) return false;
    if (!('lng' in value) || value['lng'] === undefined) return false;
    if (!('range' in value) || value['range'] === undefined) return false;
    return true;
}

export function QueryRangeManyFromJSON(json: any): QueryRangeMany {
    return QueryRangeManyFromJSONTyped(json, false);
}

export function QueryRangeManyFromJSONTyped(json: any, ignoreDiscriminator: boolean): QueryRangeMany {
    if (json == null) {
        return json;
    }
    return {
        
        'count': json['count'] == null ? undefined : json['count'],
        'indices': json['indices'],
        'lat': json['lat'],
        'lng': json['lng'],
        'range': json['range'],
        'sorted': json['sorted'] == null ? undefined : json['sorted'],
    };
}

export function QueryRangeManyToJSON(value?: QueryRangeMany | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'count': value['count'],
        'indices': value['indices'],
        'lat': value['lat'],
        'lng': value['lng'],
        'range': value['range'],
        'sorted': value['sorted'],
    };
}

