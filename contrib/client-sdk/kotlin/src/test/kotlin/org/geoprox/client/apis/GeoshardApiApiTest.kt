/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.geoprox.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.geoprox.client.apis.GeoshardApiApi
import org.geoprox.client.models.CreateIndexResponse
import org.geoprox.client.models.DropIndexResponse
import org.geoprox.client.models.InsertKey
import org.geoprox.client.models.InsertKeyBatch
import org.geoprox.client.models.InsertKeyBatchResponse
import org.geoprox.client.models.InsertKeyResponse
import org.geoprox.client.models.QueryRangeManyResponse
import org.geoprox.client.models.QueryRangeResponse
import org.geoprox.client.models.RemoveKey
import org.geoprox.client.models.RemoveKeyBatch
import org.geoprox.client.models.RemoveKeyBatchResponse
import org.geoprox.client.models.RemoveKeyResponse

class GeoshardApiApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of GeoshardApiApi
        //val apiInstance = GeoshardApiApi()

        // to test createIndex
        should("test createIndex") {
            // uncomment below to test createIndex
            //val index : kotlin.String = index_example // kotlin.String | Geospatial index name
            //val result : CreateIndexResponse = apiInstance.createIndex(index)
            //result shouldBe ("TODO")
        }

        // to test dropIndex
        should("test dropIndex") {
            // uncomment below to test dropIndex
            //val index : kotlin.String = index_example // kotlin.String | Geospatial index name
            //val result : DropIndexResponse = apiInstance.dropIndex(index)
            //result shouldBe ("TODO")
        }

        // to test insertKey
        should("test insertKey") {
            // uncomment below to test insertKey
            //val index : kotlin.String = index_example // kotlin.String | Geospatial index name
            //val insertKey : InsertKey =  // InsertKey | 
            //val result : InsertKeyResponse = apiInstance.insertKey(index, insertKey)
            //result shouldBe ("TODO")
        }

        // to test insertKeyBatch
        should("test insertKeyBatch") {
            // uncomment below to test insertKeyBatch
            //val index : kotlin.String = index_example // kotlin.String | Geospatial index name
            //val insertKeyBatch : InsertKeyBatch =  // InsertKeyBatch | 
            //val result : InsertKeyBatchResponse = apiInstance.insertKeyBatch(index, insertKeyBatch)
            //result shouldBe ("TODO")
        }

        // to test queryRange
        should("test queryRange") {
            // uncomment below to test queryRange
            //val index : kotlin.String = index_example // kotlin.String | Geospatial index name
            //val lat : kotlin.Double = 1.2 // kotlin.Double | Latitude
            //val lng : kotlin.Double = 1.2 // kotlin.Double | Longitude
            //val range : kotlin.Int = 56 // kotlin.Int | Search radius in kilometers
            //val count : kotlin.Int = 56 // kotlin.Int | Maximum number of neighbors that can be returned (default 100)
            //val sorted : kotlin.Boolean = true // kotlin.Boolean | If enabled neighbors will be sorted by distance, nearest to furthest (default false)
            //val result : QueryRangeResponse = apiInstance.queryRange(index, lat, lng, range, count, sorted)
            //result shouldBe ("TODO")
        }

        // to test queryRangeMany
        should("test queryRangeMany") {
            // uncomment below to test queryRangeMany
            //val indices : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | List of indices to search
            //val lat : kotlin.Double = 1.2 // kotlin.Double | Latitude
            //val lng : kotlin.Double = 1.2 // kotlin.Double | Longitude
            //val range : kotlin.Int = 56 // kotlin.Int | Search radius in kilometers
            //val count : kotlin.Int = 56 // kotlin.Int | Maximum number of neighbors that can be returned (default 100)
            //val sorted : kotlin.Boolean = true // kotlin.Boolean | If enabled neighbors will be sorted by distance, nearest to furthest (default false)
            //val result : QueryRangeManyResponse = apiInstance.queryRangeMany(indices, lat, lng, range, count, sorted)
            //result shouldBe ("TODO")
        }

        // to test removeKey
        should("test removeKey") {
            // uncomment below to test removeKey
            //val index : kotlin.String = index_example // kotlin.String | Geospatial index name
            //val removeKey : RemoveKey =  // RemoveKey | 
            //val result : RemoveKeyResponse = apiInstance.removeKey(index, removeKey)
            //result shouldBe ("TODO")
        }

        // to test removeKeyBatch
        should("test removeKeyBatch") {
            // uncomment below to test removeKeyBatch
            //val index : kotlin.String = index_example // kotlin.String | Geospatial index name
            //val removeKeyBatch : RemoveKeyBatch =  // RemoveKeyBatch | 
            //val result : RemoveKeyBatchResponse = apiInstance.removeKeyBatch(index, removeKeyBatch)
            //result shouldBe ("TODO")
        }

    }
}
