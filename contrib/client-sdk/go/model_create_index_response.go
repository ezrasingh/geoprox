/*
geoprox-server

Geoprox server implementation providing a HTTP API for geospatial queries and position tracking

API version: 0.4.0
Contact: singhezra@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package geoprox_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateIndexResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateIndexResponse{}

// CreateIndexResponse Returns index creation status
type CreateIndexResponse struct {
	// If true index was created
	Created bool `json:"created"`
	// If true index alredy exist
	Existed bool `json:"existed"`
}

type _CreateIndexResponse CreateIndexResponse

// NewCreateIndexResponse instantiates a new CreateIndexResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateIndexResponse(created bool, existed bool) *CreateIndexResponse {
	this := CreateIndexResponse{}
	this.Created = created
	this.Existed = existed
	return &this
}

// NewCreateIndexResponseWithDefaults instantiates a new CreateIndexResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateIndexResponseWithDefaults() *CreateIndexResponse {
	this := CreateIndexResponse{}
	return &this
}

// GetCreated returns the Created field value
func (o *CreateIndexResponse) GetCreated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *CreateIndexResponse) GetCreatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *CreateIndexResponse) SetCreated(v bool) {
	o.Created = v
}

// GetExisted returns the Existed field value
func (o *CreateIndexResponse) GetExisted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Existed
}

// GetExistedOk returns a tuple with the Existed field value
// and a boolean to check if the value has been set.
func (o *CreateIndexResponse) GetExistedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Existed, true
}

// SetExisted sets field value
func (o *CreateIndexResponse) SetExisted(v bool) {
	o.Existed = v
}

func (o CreateIndexResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateIndexResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created"] = o.Created
	toSerialize["existed"] = o.Existed
	return toSerialize, nil
}

func (o *CreateIndexResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created",
		"existed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateIndexResponse := _CreateIndexResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateIndexResponse)

	if err != nil {
		return err
	}

	*o = CreateIndexResponse(varCreateIndexResponse)

	return err
}

type NullableCreateIndexResponse struct {
	value *CreateIndexResponse
	isSet bool
}

func (v NullableCreateIndexResponse) Get() *CreateIndexResponse {
	return v.value
}

func (v *NullableCreateIndexResponse) Set(val *CreateIndexResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateIndexResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateIndexResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateIndexResponse(val *CreateIndexResponse) *NullableCreateIndexResponse {
	return &NullableCreateIndexResponse{value: val, isSet: true}
}

func (v NullableCreateIndexResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateIndexResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


