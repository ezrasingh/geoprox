/*
geoprox-server

Geoprox server implementation providing a HTTP API for geospatial queries and position tracking

API version: 0.4.2
Contact: singhezra@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package geoprox_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EncodeLatLng type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EncodeLatLng{}

// EncodeLatLng Arguments for encoding latitude/longitude as geohash
type EncodeLatLng struct {
	// Determines geohash length
	Depth int32 `json:"depth"`
	// Latitude
	Lat float64 `json:"lat"`
	// Longitude
	Lng float64 `json:"lng"`
}

type _EncodeLatLng EncodeLatLng

// NewEncodeLatLng instantiates a new EncodeLatLng object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncodeLatLng(depth int32, lat float64, lng float64) *EncodeLatLng {
	this := EncodeLatLng{}
	this.Depth = depth
	this.Lat = lat
	this.Lng = lng
	return &this
}

// NewEncodeLatLngWithDefaults instantiates a new EncodeLatLng object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncodeLatLngWithDefaults() *EncodeLatLng {
	this := EncodeLatLng{}
	return &this
}

// GetDepth returns the Depth field value
func (o *EncodeLatLng) GetDepth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Depth
}

// GetDepthOk returns a tuple with the Depth field value
// and a boolean to check if the value has been set.
func (o *EncodeLatLng) GetDepthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Depth, true
}

// SetDepth sets field value
func (o *EncodeLatLng) SetDepth(v int32) {
	o.Depth = v
}

// GetLat returns the Lat field value
func (o *EncodeLatLng) GetLat() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Lat
}

// GetLatOk returns a tuple with the Lat field value
// and a boolean to check if the value has been set.
func (o *EncodeLatLng) GetLatOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lat, true
}

// SetLat sets field value
func (o *EncodeLatLng) SetLat(v float64) {
	o.Lat = v
}

// GetLng returns the Lng field value
func (o *EncodeLatLng) GetLng() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Lng
}

// GetLngOk returns a tuple with the Lng field value
// and a boolean to check if the value has been set.
func (o *EncodeLatLng) GetLngOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lng, true
}

// SetLng sets field value
func (o *EncodeLatLng) SetLng(v float64) {
	o.Lng = v
}

func (o EncodeLatLng) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EncodeLatLng) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["depth"] = o.Depth
	toSerialize["lat"] = o.Lat
	toSerialize["lng"] = o.Lng
	return toSerialize, nil
}

func (o *EncodeLatLng) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"depth",
		"lat",
		"lng",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEncodeLatLng := _EncodeLatLng{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEncodeLatLng)

	if err != nil {
		return err
	}

	*o = EncodeLatLng(varEncodeLatLng)

	return err
}

type NullableEncodeLatLng struct {
	value *EncodeLatLng
	isSet bool
}

func (v NullableEncodeLatLng) Get() *EncodeLatLng {
	return v.value
}

func (v *NullableEncodeLatLng) Set(val *EncodeLatLng) {
	v.value = val
	v.isSet = true
}

func (v NullableEncodeLatLng) IsSet() bool {
	return v.isSet
}

func (v *NullableEncodeLatLng) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncodeLatLng(val *EncodeLatLng) *NullableEncodeLatLng {
	return &NullableEncodeLatLng{value: val, isSet: true}
}

func (v NullableEncodeLatLng) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncodeLatLng) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


