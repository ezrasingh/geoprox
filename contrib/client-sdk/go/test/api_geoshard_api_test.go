/*
geoprox-server

Testing GeoshardApiAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package geoprox_client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_geoprox_client_GeoshardApiAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GeoshardApiAPIService CreateIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		resp, httpRes, err := apiClient.GeoshardApiAPI.CreateIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GeoshardApiAPIService DropIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		resp, httpRes, err := apiClient.GeoshardApiAPI.DropIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GeoshardApiAPIService InsertKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		resp, httpRes, err := apiClient.GeoshardApiAPI.InsertKey(context.Background(), index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GeoshardApiAPIService InsertKeyBatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		resp, httpRes, err := apiClient.GeoshardApiAPI.InsertKeyBatch(context.Background(), index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GeoshardApiAPIService QueryRange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		resp, httpRes, err := apiClient.GeoshardApiAPI.QueryRange(context.Background(), index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GeoshardApiAPIService QueryRangeMany", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GeoshardApiAPI.QueryRangeMany(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GeoshardApiAPIService RemoveKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		resp, httpRes, err := apiClient.GeoshardApiAPI.RemoveKey(context.Background(), index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GeoshardApiAPIService RemoveKeyBatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		resp, httpRes, err := apiClient.GeoshardApiAPI.RemoveKeyBatch(context.Background(), index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
