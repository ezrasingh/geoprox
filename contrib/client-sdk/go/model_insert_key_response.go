/*
geoprox-server

Geoprox server implementation providing a HTTP API for geospatial queries and position tracking

API version: 0.4.2
Contact: singhezra@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package geoprox_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InsertKeyResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InsertKeyResponse{}

// InsertKeyResponse Returns key and geohash
type InsertKeyResponse struct {
	// Geohash encoded latitude/longitude
	Geohash string `json:"geohash"`
	// Object key
	Key string `json:"key"`
}

type _InsertKeyResponse InsertKeyResponse

// NewInsertKeyResponse instantiates a new InsertKeyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInsertKeyResponse(geohash string, key string) *InsertKeyResponse {
	this := InsertKeyResponse{}
	this.Geohash = geohash
	this.Key = key
	return &this
}

// NewInsertKeyResponseWithDefaults instantiates a new InsertKeyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInsertKeyResponseWithDefaults() *InsertKeyResponse {
	this := InsertKeyResponse{}
	return &this
}

// GetGeohash returns the Geohash field value
func (o *InsertKeyResponse) GetGeohash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Geohash
}

// GetGeohashOk returns a tuple with the Geohash field value
// and a boolean to check if the value has been set.
func (o *InsertKeyResponse) GetGeohashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Geohash, true
}

// SetGeohash sets field value
func (o *InsertKeyResponse) SetGeohash(v string) {
	o.Geohash = v
}

// GetKey returns the Key field value
func (o *InsertKeyResponse) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *InsertKeyResponse) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *InsertKeyResponse) SetKey(v string) {
	o.Key = v
}

func (o InsertKeyResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InsertKeyResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["geohash"] = o.Geohash
	toSerialize["key"] = o.Key
	return toSerialize, nil
}

func (o *InsertKeyResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"geohash",
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInsertKeyResponse := _InsertKeyResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInsertKeyResponse)

	if err != nil {
		return err
	}

	*o = InsertKeyResponse(varInsertKeyResponse)

	return err
}

type NullableInsertKeyResponse struct {
	value *InsertKeyResponse
	isSet bool
}

func (v NullableInsertKeyResponse) Get() *InsertKeyResponse {
	return v.value
}

func (v *NullableInsertKeyResponse) Set(val *InsertKeyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInsertKeyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInsertKeyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInsertKeyResponse(val *InsertKeyResponse) *NullableInsertKeyResponse {
	return &NullableInsertKeyResponse{value: val, isSet: true}
}

func (v NullableInsertKeyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInsertKeyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


