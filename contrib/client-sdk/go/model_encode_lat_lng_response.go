/*
geoprox-server

Geoprox server implementation providing a HTTP API for geospatial queries and position tracking

API version: 0.4.2
Contact: singhezra@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package geoprox_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EncodeLatLngResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EncodeLatLngResponse{}

// EncodeLatLngResponse Returns geohash encoded latitude/longitude
type EncodeLatLngResponse struct {
	Geohash string `json:"geohash"`
}

type _EncodeLatLngResponse EncodeLatLngResponse

// NewEncodeLatLngResponse instantiates a new EncodeLatLngResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncodeLatLngResponse(geohash string) *EncodeLatLngResponse {
	this := EncodeLatLngResponse{}
	this.Geohash = geohash
	return &this
}

// NewEncodeLatLngResponseWithDefaults instantiates a new EncodeLatLngResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncodeLatLngResponseWithDefaults() *EncodeLatLngResponse {
	this := EncodeLatLngResponse{}
	return &this
}

// GetGeohash returns the Geohash field value
func (o *EncodeLatLngResponse) GetGeohash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Geohash
}

// GetGeohashOk returns a tuple with the Geohash field value
// and a boolean to check if the value has been set.
func (o *EncodeLatLngResponse) GetGeohashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Geohash, true
}

// SetGeohash sets field value
func (o *EncodeLatLngResponse) SetGeohash(v string) {
	o.Geohash = v
}

func (o EncodeLatLngResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EncodeLatLngResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["geohash"] = o.Geohash
	return toSerialize, nil
}

func (o *EncodeLatLngResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"geohash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEncodeLatLngResponse := _EncodeLatLngResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEncodeLatLngResponse)

	if err != nil {
		return err
	}

	*o = EncodeLatLngResponse(varEncodeLatLngResponse)

	return err
}

type NullableEncodeLatLngResponse struct {
	value *EncodeLatLngResponse
	isSet bool
}

func (v NullableEncodeLatLngResponse) Get() *EncodeLatLngResponse {
	return v.value
}

func (v *NullableEncodeLatLngResponse) Set(val *EncodeLatLngResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEncodeLatLngResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEncodeLatLngResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncodeLatLngResponse(val *EncodeLatLngResponse) *NullableEncodeLatLngResponse {
	return &NullableEncodeLatLngResponse{value: val, isSet: true}
}

func (v NullableEncodeLatLngResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncodeLatLngResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


