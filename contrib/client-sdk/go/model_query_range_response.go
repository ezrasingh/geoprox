/*
geoprox-server

Geoprox server implementation providing a HTTP API for geospatial queries and position tracking

API version: 0.5.0
Contact: singhezra@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package geoprox_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QueryRangeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryRangeResponse{}

// QueryRangeResponse Returns object keys found with their distance
type QueryRangeResponse struct {
	// Object keys found within range
	Found []Neighbor `json:"found"`
}

type _QueryRangeResponse QueryRangeResponse

// NewQueryRangeResponse instantiates a new QueryRangeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryRangeResponse(found []Neighbor) *QueryRangeResponse {
	this := QueryRangeResponse{}
	this.Found = found
	return &this
}

// NewQueryRangeResponseWithDefaults instantiates a new QueryRangeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryRangeResponseWithDefaults() *QueryRangeResponse {
	this := QueryRangeResponse{}
	return &this
}

// GetFound returns the Found field value
func (o *QueryRangeResponse) GetFound() []Neighbor {
	if o == nil {
		var ret []Neighbor
		return ret
	}

	return o.Found
}

// GetFoundOk returns a tuple with the Found field value
// and a boolean to check if the value has been set.
func (o *QueryRangeResponse) GetFoundOk() ([]Neighbor, bool) {
	if o == nil {
		return nil, false
	}
	return o.Found, true
}

// SetFound sets field value
func (o *QueryRangeResponse) SetFound(v []Neighbor) {
	o.Found = v
}

func (o QueryRangeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryRangeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["found"] = o.Found
	return toSerialize, nil
}

func (o *QueryRangeResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"found",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQueryRangeResponse := _QueryRangeResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQueryRangeResponse)

	if err != nil {
		return err
	}

	*o = QueryRangeResponse(varQueryRangeResponse)

	return err
}

type NullableQueryRangeResponse struct {
	value *QueryRangeResponse
	isSet bool
}

func (v NullableQueryRangeResponse) Get() *QueryRangeResponse {
	return v.value
}

func (v *NullableQueryRangeResponse) Set(val *QueryRangeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryRangeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryRangeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryRangeResponse(val *QueryRangeResponse) *NullableQueryRangeResponse {
	return &NullableQueryRangeResponse{value: val, isSet: true}
}

func (v NullableQueryRangeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryRangeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


