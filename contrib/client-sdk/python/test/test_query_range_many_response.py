# coding: utf-8

"""
    geoprox-server

    Geoprox server implementation providing a HTTP API for geospatial queries and position tracking

    The version of the OpenAPI document: 0.4.0
    Contact: singhezra@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from geoprox_client.models.query_range_many_response import QueryRangeManyResponse

class TestQueryRangeManyResponse(unittest.TestCase):
    """QueryRangeManyResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> QueryRangeManyResponse:
        """Test QueryRangeManyResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `QueryRangeManyResponse`
        """
        model = QueryRangeManyResponse()
        if include_optional:
            return QueryRangeManyResponse(
                errors = {
                    'key' : ''
                    },
                results = {
                    'key' : [
                        geoprox_client.models.neighbor.Neighbor(
                            distance = 1.337, 
                            key = '', )
                        ]
                    }
            )
        else:
            return QueryRangeManyResponse(
                errors = {
                    'key' : ''
                    },
                results = {
                    'key' : [
                        geoprox_client.models.neighbor.Neighbor(
                            distance = 1.337, 
                            key = '', )
                        ]
                    },
        )
        """

    def testQueryRangeManyResponse(self):
        """Test QueryRangeManyResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
