/*
 * geoprox-server
 *
 * Geoprox server implementation providing a HTTP API for geospatial queries and position tracking
 *
 * The version of the OpenAPI document: 0.4.1
 * Contact: singhezra@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GeoproxClient.Client;
using GeoproxClient.Model;

namespace GeoproxClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGeoshardApiApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create geospatial index
        /// </summary>
        /// <remarks>
        /// Creates an in-memory index within this geoshard
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateIndexResponse</returns>
        CreateIndexResponse CreateIndex(string index, int operationIndex = 0);

        /// <summary>
        /// Create geospatial index
        /// </summary>
        /// <remarks>
        /// Creates an in-memory index within this geoshard
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateIndexResponse</returns>
        ApiResponse<CreateIndexResponse> CreateIndexWithHttpInfo(string index, int operationIndex = 0);
        /// <summary>
        /// Deletes geospatial index
        /// </summary>
        /// <remarks>
        /// Drop index. All keys will be lost
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DropIndexResponse</returns>
        DropIndexResponse DropIndex(string index, int operationIndex = 0);

        /// <summary>
        /// Deletes geospatial index
        /// </summary>
        /// <remarks>
        /// Drop index. All keys will be lost
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DropIndexResponse</returns>
        ApiResponse<DropIndexResponse> DropIndexWithHttpInfo(string index, int operationIndex = 0);
        /// <summary>
        /// Insert key into index
        /// </summary>
        /// <remarks>
        /// Inserts key into geospatial index
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="insertKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InsertKeyResponse</returns>
        InsertKeyResponse InsertKey(string index, InsertKey insertKey, int operationIndex = 0);

        /// <summary>
        /// Insert key into index
        /// </summary>
        /// <remarks>
        /// Inserts key into geospatial index
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="insertKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InsertKeyResponse</returns>
        ApiResponse<InsertKeyResponse> InsertKeyWithHttpInfo(string index, InsertKey insertKey, int operationIndex = 0);
        /// <summary>
        /// Insert multiple keys into index
        /// </summary>
        /// <remarks>
        /// Inserts multiple keys into geospatial index
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="insertKeyBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InsertKeyBatchResponse</returns>
        InsertKeyBatchResponse InsertKeyBatch(string index, InsertKeyBatch insertKeyBatch, int operationIndex = 0);

        /// <summary>
        /// Insert multiple keys into index
        /// </summary>
        /// <remarks>
        /// Inserts multiple keys into geospatial index
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="insertKeyBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InsertKeyBatchResponse</returns>
        ApiResponse<InsertKeyBatchResponse> InsertKeyBatchWithHttpInfo(string index, InsertKeyBatch insertKeyBatch, int operationIndex = 0);
        /// <summary>
        /// Search index for objects nearby
        /// </summary>
        /// <remarks>
        /// Search geospatial index for all keys within some distance
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="lat">Latitude</param>
        /// <param name="lng">Longitude</param>
        /// <param name="range">Search radius in kilometers</param>
        /// <param name="count">Maximum number of neighbors that can be returned (default 100) (optional)</param>
        /// <param name="sorted">If enabled neighbors will be sorted by distance, nearest to furthest (default false) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QueryRangeResponse</returns>
        QueryRangeResponse QueryRange(string index, double lat, double lng, int range, int? count = default(int?), bool? sorted = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Search index for objects nearby
        /// </summary>
        /// <remarks>
        /// Search geospatial index for all keys within some distance
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="lat">Latitude</param>
        /// <param name="lng">Longitude</param>
        /// <param name="range">Search radius in kilometers</param>
        /// <param name="count">Maximum number of neighbors that can be returned (default 100) (optional)</param>
        /// <param name="sorted">If enabled neighbors will be sorted by distance, nearest to furthest (default false) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QueryRangeResponse</returns>
        ApiResponse<QueryRangeResponse> QueryRangeWithHttpInfo(string index, double lat, double lng, int range, int? count = default(int?), bool? sorted = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Search multiple indices for objects nearby
        /// </summary>
        /// <remarks>
        /// Search geospatial many indices for all keys within some distance
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indices">List of indices to search</param>
        /// <param name="lat">Latitude</param>
        /// <param name="lng">Longitude</param>
        /// <param name="range">Search radius in kilometers</param>
        /// <param name="count">Maximum number of neighbors that can be returned (default 100) (optional)</param>
        /// <param name="sorted">If enabled neighbors will be sorted by distance, nearest to furthest (default false) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QueryRangeManyResponse</returns>
        QueryRangeManyResponse QueryRangeMany(List<string> indices, double lat, double lng, int range, int? count = default(int?), bool? sorted = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Search multiple indices for objects nearby
        /// </summary>
        /// <remarks>
        /// Search geospatial many indices for all keys within some distance
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indices">List of indices to search</param>
        /// <param name="lat">Latitude</param>
        /// <param name="lng">Longitude</param>
        /// <param name="range">Search radius in kilometers</param>
        /// <param name="count">Maximum number of neighbors that can be returned (default 100) (optional)</param>
        /// <param name="sorted">If enabled neighbors will be sorted by distance, nearest to furthest (default false) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QueryRangeManyResponse</returns>
        ApiResponse<QueryRangeManyResponse> QueryRangeManyWithHttpInfo(List<string> indices, double lat, double lng, int range, int? count = default(int?), bool? sorted = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Remove key from index
        /// </summary>
        /// <remarks>
        /// Removes key from geospatial index
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="removeKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveKeyResponse</returns>
        RemoveKeyResponse RemoveKey(string index, RemoveKey removeKey, int operationIndex = 0);

        /// <summary>
        /// Remove key from index
        /// </summary>
        /// <remarks>
        /// Removes key from geospatial index
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="removeKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveKeyResponse</returns>
        ApiResponse<RemoveKeyResponse> RemoveKeyWithHttpInfo(string index, RemoveKey removeKey, int operationIndex = 0);
        /// <summary>
        /// Remove multiple keys from index
        /// </summary>
        /// <remarks>
        /// Removes multiple keys from geospatial index
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="removeKeyBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveKeyBatchResponse</returns>
        RemoveKeyBatchResponse RemoveKeyBatch(string index, RemoveKeyBatch removeKeyBatch, int operationIndex = 0);

        /// <summary>
        /// Remove multiple keys from index
        /// </summary>
        /// <remarks>
        /// Removes multiple keys from geospatial index
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="removeKeyBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveKeyBatchResponse</returns>
        ApiResponse<RemoveKeyBatchResponse> RemoveKeyBatchWithHttpInfo(string index, RemoveKeyBatch removeKeyBatch, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGeoshardApiApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create geospatial index
        /// </summary>
        /// <remarks>
        /// Creates an in-memory index within this geoshard
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateIndexResponse</returns>
        System.Threading.Tasks.Task<CreateIndexResponse> CreateIndexAsync(string index, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create geospatial index
        /// </summary>
        /// <remarks>
        /// Creates an in-memory index within this geoshard
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateIndexResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateIndexResponse>> CreateIndexWithHttpInfoAsync(string index, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes geospatial index
        /// </summary>
        /// <remarks>
        /// Drop index. All keys will be lost
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DropIndexResponse</returns>
        System.Threading.Tasks.Task<DropIndexResponse> DropIndexAsync(string index, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes geospatial index
        /// </summary>
        /// <remarks>
        /// Drop index. All keys will be lost
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DropIndexResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DropIndexResponse>> DropIndexWithHttpInfoAsync(string index, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Insert key into index
        /// </summary>
        /// <remarks>
        /// Inserts key into geospatial index
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="insertKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsertKeyResponse</returns>
        System.Threading.Tasks.Task<InsertKeyResponse> InsertKeyAsync(string index, InsertKey insertKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Insert key into index
        /// </summary>
        /// <remarks>
        /// Inserts key into geospatial index
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="insertKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsertKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InsertKeyResponse>> InsertKeyWithHttpInfoAsync(string index, InsertKey insertKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Insert multiple keys into index
        /// </summary>
        /// <remarks>
        /// Inserts multiple keys into geospatial index
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="insertKeyBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsertKeyBatchResponse</returns>
        System.Threading.Tasks.Task<InsertKeyBatchResponse> InsertKeyBatchAsync(string index, InsertKeyBatch insertKeyBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Insert multiple keys into index
        /// </summary>
        /// <remarks>
        /// Inserts multiple keys into geospatial index
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="insertKeyBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsertKeyBatchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InsertKeyBatchResponse>> InsertKeyBatchWithHttpInfoAsync(string index, InsertKeyBatch insertKeyBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search index for objects nearby
        /// </summary>
        /// <remarks>
        /// Search geospatial index for all keys within some distance
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="lat">Latitude</param>
        /// <param name="lng">Longitude</param>
        /// <param name="range">Search radius in kilometers</param>
        /// <param name="count">Maximum number of neighbors that can be returned (default 100) (optional)</param>
        /// <param name="sorted">If enabled neighbors will be sorted by distance, nearest to furthest (default false) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryRangeResponse</returns>
        System.Threading.Tasks.Task<QueryRangeResponse> QueryRangeAsync(string index, double lat, double lng, int range, int? count = default(int?), bool? sorted = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search index for objects nearby
        /// </summary>
        /// <remarks>
        /// Search geospatial index for all keys within some distance
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="lat">Latitude</param>
        /// <param name="lng">Longitude</param>
        /// <param name="range">Search radius in kilometers</param>
        /// <param name="count">Maximum number of neighbors that can be returned (default 100) (optional)</param>
        /// <param name="sorted">If enabled neighbors will be sorted by distance, nearest to furthest (default false) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryRangeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryRangeResponse>> QueryRangeWithHttpInfoAsync(string index, double lat, double lng, int range, int? count = default(int?), bool? sorted = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search multiple indices for objects nearby
        /// </summary>
        /// <remarks>
        /// Search geospatial many indices for all keys within some distance
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indices">List of indices to search</param>
        /// <param name="lat">Latitude</param>
        /// <param name="lng">Longitude</param>
        /// <param name="range">Search radius in kilometers</param>
        /// <param name="count">Maximum number of neighbors that can be returned (default 100) (optional)</param>
        /// <param name="sorted">If enabled neighbors will be sorted by distance, nearest to furthest (default false) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryRangeManyResponse</returns>
        System.Threading.Tasks.Task<QueryRangeManyResponse> QueryRangeManyAsync(List<string> indices, double lat, double lng, int range, int? count = default(int?), bool? sorted = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search multiple indices for objects nearby
        /// </summary>
        /// <remarks>
        /// Search geospatial many indices for all keys within some distance
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indices">List of indices to search</param>
        /// <param name="lat">Latitude</param>
        /// <param name="lng">Longitude</param>
        /// <param name="range">Search radius in kilometers</param>
        /// <param name="count">Maximum number of neighbors that can be returned (default 100) (optional)</param>
        /// <param name="sorted">If enabled neighbors will be sorted by distance, nearest to furthest (default false) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryRangeManyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryRangeManyResponse>> QueryRangeManyWithHttpInfoAsync(List<string> indices, double lat, double lng, int range, int? count = default(int?), bool? sorted = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove key from index
        /// </summary>
        /// <remarks>
        /// Removes key from geospatial index
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="removeKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveKeyResponse</returns>
        System.Threading.Tasks.Task<RemoveKeyResponse> RemoveKeyAsync(string index, RemoveKey removeKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove key from index
        /// </summary>
        /// <remarks>
        /// Removes key from geospatial index
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="removeKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveKeyResponse>> RemoveKeyWithHttpInfoAsync(string index, RemoveKey removeKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove multiple keys from index
        /// </summary>
        /// <remarks>
        /// Removes multiple keys from geospatial index
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="removeKeyBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveKeyBatchResponse</returns>
        System.Threading.Tasks.Task<RemoveKeyBatchResponse> RemoveKeyBatchAsync(string index, RemoveKeyBatch removeKeyBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove multiple keys from index
        /// </summary>
        /// <remarks>
        /// Removes multiple keys from geospatial index
        /// </remarks>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="removeKeyBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveKeyBatchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveKeyBatchResponse>> RemoveKeyBatchWithHttpInfoAsync(string index, RemoveKeyBatch removeKeyBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGeoshardApiApi : IGeoshardApiApiSync, IGeoshardApiApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GeoshardApiApi : IGeoshardApiApi
    {
        private GeoproxClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GeoshardApiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GeoshardApiApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeoshardApiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GeoshardApiApi(string basePath)
        {
            this.Configuration = GeoproxClient.Client.Configuration.MergeConfigurations(
                GeoproxClient.Client.GlobalConfiguration.Instance,
                new GeoproxClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GeoproxClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GeoproxClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GeoproxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeoshardApiApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GeoshardApiApi(GeoproxClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GeoproxClient.Client.Configuration.MergeConfigurations(
                GeoproxClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GeoproxClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GeoproxClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GeoproxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeoshardApiApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GeoshardApiApi(GeoproxClient.Client.ISynchronousClient client, GeoproxClient.Client.IAsynchronousClient asyncClient, GeoproxClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GeoproxClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GeoproxClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GeoproxClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GeoproxClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GeoproxClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create geospatial index Creates an in-memory index within this geoshard
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateIndexResponse</returns>
        public CreateIndexResponse CreateIndex(string index, int operationIndex = 0)
        {
            GeoproxClient.Client.ApiResponse<CreateIndexResponse> localVarResponse = CreateIndexWithHttpInfo(index);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create geospatial index Creates an in-memory index within this geoshard
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateIndexResponse</returns>
        public GeoproxClient.Client.ApiResponse<CreateIndexResponse> CreateIndexWithHttpInfo(string index, int operationIndex = 0)
        {
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'index' when calling GeoshardApiApi->CreateIndex");
            }

            GeoproxClient.Client.RequestOptions localVarRequestOptions = new GeoproxClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeoproxClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GeoproxClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("index", GeoproxClient.Client.ClientUtils.ParameterToString(index)); // path parameter

            localVarRequestOptions.Operation = "GeoshardApiApi.CreateIndex";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateIndexResponse>("/api/v1/shard/{index}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateIndex", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create geospatial index Creates an in-memory index within this geoshard
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateIndexResponse</returns>
        public async System.Threading.Tasks.Task<CreateIndexResponse> CreateIndexAsync(string index, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GeoproxClient.Client.ApiResponse<CreateIndexResponse> localVarResponse = await CreateIndexWithHttpInfoAsync(index, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create geospatial index Creates an in-memory index within this geoshard
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateIndexResponse)</returns>
        public async System.Threading.Tasks.Task<GeoproxClient.Client.ApiResponse<CreateIndexResponse>> CreateIndexWithHttpInfoAsync(string index, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'index' when calling GeoshardApiApi->CreateIndex");
            }


            GeoproxClient.Client.RequestOptions localVarRequestOptions = new GeoproxClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeoproxClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GeoproxClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("index", GeoproxClient.Client.ClientUtils.ParameterToString(index)); // path parameter

            localVarRequestOptions.Operation = "GeoshardApiApi.CreateIndex";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateIndexResponse>("/api/v1/shard/{index}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateIndex", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes geospatial index Drop index. All keys will be lost
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DropIndexResponse</returns>
        public DropIndexResponse DropIndex(string index, int operationIndex = 0)
        {
            GeoproxClient.Client.ApiResponse<DropIndexResponse> localVarResponse = DropIndexWithHttpInfo(index);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes geospatial index Drop index. All keys will be lost
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DropIndexResponse</returns>
        public GeoproxClient.Client.ApiResponse<DropIndexResponse> DropIndexWithHttpInfo(string index, int operationIndex = 0)
        {
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'index' when calling GeoshardApiApi->DropIndex");
            }

            GeoproxClient.Client.RequestOptions localVarRequestOptions = new GeoproxClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeoproxClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GeoproxClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("index", GeoproxClient.Client.ClientUtils.ParameterToString(index)); // path parameter

            localVarRequestOptions.Operation = "GeoshardApiApi.DropIndex";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<DropIndexResponse>("/api/v1/shard/{index}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DropIndex", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes geospatial index Drop index. All keys will be lost
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DropIndexResponse</returns>
        public async System.Threading.Tasks.Task<DropIndexResponse> DropIndexAsync(string index, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GeoproxClient.Client.ApiResponse<DropIndexResponse> localVarResponse = await DropIndexWithHttpInfoAsync(index, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes geospatial index Drop index. All keys will be lost
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DropIndexResponse)</returns>
        public async System.Threading.Tasks.Task<GeoproxClient.Client.ApiResponse<DropIndexResponse>> DropIndexWithHttpInfoAsync(string index, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'index' when calling GeoshardApiApi->DropIndex");
            }


            GeoproxClient.Client.RequestOptions localVarRequestOptions = new GeoproxClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeoproxClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GeoproxClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("index", GeoproxClient.Client.ClientUtils.ParameterToString(index)); // path parameter

            localVarRequestOptions.Operation = "GeoshardApiApi.DropIndex";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DropIndexResponse>("/api/v1/shard/{index}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DropIndex", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Insert key into index Inserts key into geospatial index
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="insertKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InsertKeyResponse</returns>
        public InsertKeyResponse InsertKey(string index, InsertKey insertKey, int operationIndex = 0)
        {
            GeoproxClient.Client.ApiResponse<InsertKeyResponse> localVarResponse = InsertKeyWithHttpInfo(index, insertKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Insert key into index Inserts key into geospatial index
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="insertKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InsertKeyResponse</returns>
        public GeoproxClient.Client.ApiResponse<InsertKeyResponse> InsertKeyWithHttpInfo(string index, InsertKey insertKey, int operationIndex = 0)
        {
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'index' when calling GeoshardApiApi->InsertKey");
            }

            // verify the required parameter 'insertKey' is set
            if (insertKey == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'insertKey' when calling GeoshardApiApi->InsertKey");
            }

            GeoproxClient.Client.RequestOptions localVarRequestOptions = new GeoproxClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeoproxClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GeoproxClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("index", GeoproxClient.Client.ClientUtils.ParameterToString(index)); // path parameter
            localVarRequestOptions.Data = insertKey;

            localVarRequestOptions.Operation = "GeoshardApiApi.InsertKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<InsertKeyResponse>("/api/v1/shard/{index}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InsertKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Insert key into index Inserts key into geospatial index
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="insertKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsertKeyResponse</returns>
        public async System.Threading.Tasks.Task<InsertKeyResponse> InsertKeyAsync(string index, InsertKey insertKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GeoproxClient.Client.ApiResponse<InsertKeyResponse> localVarResponse = await InsertKeyWithHttpInfoAsync(index, insertKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Insert key into index Inserts key into geospatial index
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="insertKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsertKeyResponse)</returns>
        public async System.Threading.Tasks.Task<GeoproxClient.Client.ApiResponse<InsertKeyResponse>> InsertKeyWithHttpInfoAsync(string index, InsertKey insertKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'index' when calling GeoshardApiApi->InsertKey");
            }

            // verify the required parameter 'insertKey' is set
            if (insertKey == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'insertKey' when calling GeoshardApiApi->InsertKey");
            }


            GeoproxClient.Client.RequestOptions localVarRequestOptions = new GeoproxClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeoproxClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GeoproxClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("index", GeoproxClient.Client.ClientUtils.ParameterToString(index)); // path parameter
            localVarRequestOptions.Data = insertKey;

            localVarRequestOptions.Operation = "GeoshardApiApi.InsertKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<InsertKeyResponse>("/api/v1/shard/{index}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InsertKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Insert multiple keys into index Inserts multiple keys into geospatial index
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="insertKeyBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InsertKeyBatchResponse</returns>
        public InsertKeyBatchResponse InsertKeyBatch(string index, InsertKeyBatch insertKeyBatch, int operationIndex = 0)
        {
            GeoproxClient.Client.ApiResponse<InsertKeyBatchResponse> localVarResponse = InsertKeyBatchWithHttpInfo(index, insertKeyBatch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Insert multiple keys into index Inserts multiple keys into geospatial index
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="insertKeyBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InsertKeyBatchResponse</returns>
        public GeoproxClient.Client.ApiResponse<InsertKeyBatchResponse> InsertKeyBatchWithHttpInfo(string index, InsertKeyBatch insertKeyBatch, int operationIndex = 0)
        {
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'index' when calling GeoshardApiApi->InsertKeyBatch");
            }

            // verify the required parameter 'insertKeyBatch' is set
            if (insertKeyBatch == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'insertKeyBatch' when calling GeoshardApiApi->InsertKeyBatch");
            }

            GeoproxClient.Client.RequestOptions localVarRequestOptions = new GeoproxClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeoproxClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GeoproxClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("index", GeoproxClient.Client.ClientUtils.ParameterToString(index)); // path parameter
            localVarRequestOptions.Data = insertKeyBatch;

            localVarRequestOptions.Operation = "GeoshardApiApi.InsertKeyBatch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<InsertKeyBatchResponse>("/api/v1/shard/{index}/batch/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InsertKeyBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Insert multiple keys into index Inserts multiple keys into geospatial index
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="insertKeyBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsertKeyBatchResponse</returns>
        public async System.Threading.Tasks.Task<InsertKeyBatchResponse> InsertKeyBatchAsync(string index, InsertKeyBatch insertKeyBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GeoproxClient.Client.ApiResponse<InsertKeyBatchResponse> localVarResponse = await InsertKeyBatchWithHttpInfoAsync(index, insertKeyBatch, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Insert multiple keys into index Inserts multiple keys into geospatial index
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="insertKeyBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsertKeyBatchResponse)</returns>
        public async System.Threading.Tasks.Task<GeoproxClient.Client.ApiResponse<InsertKeyBatchResponse>> InsertKeyBatchWithHttpInfoAsync(string index, InsertKeyBatch insertKeyBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'index' when calling GeoshardApiApi->InsertKeyBatch");
            }

            // verify the required parameter 'insertKeyBatch' is set
            if (insertKeyBatch == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'insertKeyBatch' when calling GeoshardApiApi->InsertKeyBatch");
            }


            GeoproxClient.Client.RequestOptions localVarRequestOptions = new GeoproxClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeoproxClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GeoproxClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("index", GeoproxClient.Client.ClientUtils.ParameterToString(index)); // path parameter
            localVarRequestOptions.Data = insertKeyBatch;

            localVarRequestOptions.Operation = "GeoshardApiApi.InsertKeyBatch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<InsertKeyBatchResponse>("/api/v1/shard/{index}/batch/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InsertKeyBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search index for objects nearby Search geospatial index for all keys within some distance
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="lat">Latitude</param>
        /// <param name="lng">Longitude</param>
        /// <param name="range">Search radius in kilometers</param>
        /// <param name="count">Maximum number of neighbors that can be returned (default 100) (optional)</param>
        /// <param name="sorted">If enabled neighbors will be sorted by distance, nearest to furthest (default false) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QueryRangeResponse</returns>
        public QueryRangeResponse QueryRange(string index, double lat, double lng, int range, int? count = default(int?), bool? sorted = default(bool?), int operationIndex = 0)
        {
            GeoproxClient.Client.ApiResponse<QueryRangeResponse> localVarResponse = QueryRangeWithHttpInfo(index, lat, lng, range, count, sorted);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search index for objects nearby Search geospatial index for all keys within some distance
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="lat">Latitude</param>
        /// <param name="lng">Longitude</param>
        /// <param name="range">Search radius in kilometers</param>
        /// <param name="count">Maximum number of neighbors that can be returned (default 100) (optional)</param>
        /// <param name="sorted">If enabled neighbors will be sorted by distance, nearest to furthest (default false) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QueryRangeResponse</returns>
        public GeoproxClient.Client.ApiResponse<QueryRangeResponse> QueryRangeWithHttpInfo(string index, double lat, double lng, int range, int? count = default(int?), bool? sorted = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'index' when calling GeoshardApiApi->QueryRange");
            }

            GeoproxClient.Client.RequestOptions localVarRequestOptions = new GeoproxClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeoproxClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GeoproxClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("index", GeoproxClient.Client.ClientUtils.ParameterToString(index)); // path parameter
            localVarRequestOptions.QueryParameters.Add(GeoproxClient.Client.ClientUtils.ParameterToMultiMap("", "lat", lat));
            localVarRequestOptions.QueryParameters.Add(GeoproxClient.Client.ClientUtils.ParameterToMultiMap("", "lng", lng));
            localVarRequestOptions.QueryParameters.Add(GeoproxClient.Client.ClientUtils.ParameterToMultiMap("", "range", range));
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeoproxClient.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (sorted != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeoproxClient.Client.ClientUtils.ParameterToMultiMap("", "sorted", sorted));
            }

            localVarRequestOptions.Operation = "GeoshardApiApi.QueryRange";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<QueryRangeResponse>("/api/v1/shard/{index}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryRange", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search index for objects nearby Search geospatial index for all keys within some distance
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="lat">Latitude</param>
        /// <param name="lng">Longitude</param>
        /// <param name="range">Search radius in kilometers</param>
        /// <param name="count">Maximum number of neighbors that can be returned (default 100) (optional)</param>
        /// <param name="sorted">If enabled neighbors will be sorted by distance, nearest to furthest (default false) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryRangeResponse</returns>
        public async System.Threading.Tasks.Task<QueryRangeResponse> QueryRangeAsync(string index, double lat, double lng, int range, int? count = default(int?), bool? sorted = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GeoproxClient.Client.ApiResponse<QueryRangeResponse> localVarResponse = await QueryRangeWithHttpInfoAsync(index, lat, lng, range, count, sorted, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search index for objects nearby Search geospatial index for all keys within some distance
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="lat">Latitude</param>
        /// <param name="lng">Longitude</param>
        /// <param name="range">Search radius in kilometers</param>
        /// <param name="count">Maximum number of neighbors that can be returned (default 100) (optional)</param>
        /// <param name="sorted">If enabled neighbors will be sorted by distance, nearest to furthest (default false) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryRangeResponse)</returns>
        public async System.Threading.Tasks.Task<GeoproxClient.Client.ApiResponse<QueryRangeResponse>> QueryRangeWithHttpInfoAsync(string index, double lat, double lng, int range, int? count = default(int?), bool? sorted = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'index' when calling GeoshardApiApi->QueryRange");
            }


            GeoproxClient.Client.RequestOptions localVarRequestOptions = new GeoproxClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeoproxClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GeoproxClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("index", GeoproxClient.Client.ClientUtils.ParameterToString(index)); // path parameter
            localVarRequestOptions.QueryParameters.Add(GeoproxClient.Client.ClientUtils.ParameterToMultiMap("", "lat", lat));
            localVarRequestOptions.QueryParameters.Add(GeoproxClient.Client.ClientUtils.ParameterToMultiMap("", "lng", lng));
            localVarRequestOptions.QueryParameters.Add(GeoproxClient.Client.ClientUtils.ParameterToMultiMap("", "range", range));
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeoproxClient.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (sorted != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeoproxClient.Client.ClientUtils.ParameterToMultiMap("", "sorted", sorted));
            }

            localVarRequestOptions.Operation = "GeoshardApiApi.QueryRange";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<QueryRangeResponse>("/api/v1/shard/{index}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryRange", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search multiple indices for objects nearby Search geospatial many indices for all keys within some distance
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indices">List of indices to search</param>
        /// <param name="lat">Latitude</param>
        /// <param name="lng">Longitude</param>
        /// <param name="range">Search radius in kilometers</param>
        /// <param name="count">Maximum number of neighbors that can be returned (default 100) (optional)</param>
        /// <param name="sorted">If enabled neighbors will be sorted by distance, nearest to furthest (default false) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QueryRangeManyResponse</returns>
        public QueryRangeManyResponse QueryRangeMany(List<string> indices, double lat, double lng, int range, int? count = default(int?), bool? sorted = default(bool?), int operationIndex = 0)
        {
            GeoproxClient.Client.ApiResponse<QueryRangeManyResponse> localVarResponse = QueryRangeManyWithHttpInfo(indices, lat, lng, range, count, sorted);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search multiple indices for objects nearby Search geospatial many indices for all keys within some distance
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indices">List of indices to search</param>
        /// <param name="lat">Latitude</param>
        /// <param name="lng">Longitude</param>
        /// <param name="range">Search radius in kilometers</param>
        /// <param name="count">Maximum number of neighbors that can be returned (default 100) (optional)</param>
        /// <param name="sorted">If enabled neighbors will be sorted by distance, nearest to furthest (default false) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QueryRangeManyResponse</returns>
        public GeoproxClient.Client.ApiResponse<QueryRangeManyResponse> QueryRangeManyWithHttpInfo(List<string> indices, double lat, double lng, int range, int? count = default(int?), bool? sorted = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'indices' is set
            if (indices == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'indices' when calling GeoshardApiApi->QueryRangeMany");
            }

            GeoproxClient.Client.RequestOptions localVarRequestOptions = new GeoproxClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeoproxClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GeoproxClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(GeoproxClient.Client.ClientUtils.ParameterToMultiMap("multi", "indices", indices));
            localVarRequestOptions.QueryParameters.Add(GeoproxClient.Client.ClientUtils.ParameterToMultiMap("", "lat", lat));
            localVarRequestOptions.QueryParameters.Add(GeoproxClient.Client.ClientUtils.ParameterToMultiMap("", "lng", lng));
            localVarRequestOptions.QueryParameters.Add(GeoproxClient.Client.ClientUtils.ParameterToMultiMap("", "range", range));
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeoproxClient.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (sorted != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeoproxClient.Client.ClientUtils.ParameterToMultiMap("", "sorted", sorted));
            }

            localVarRequestOptions.Operation = "GeoshardApiApi.QueryRangeMany";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<QueryRangeManyResponse>("/api/v1/shard/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryRangeMany", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search multiple indices for objects nearby Search geospatial many indices for all keys within some distance
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indices">List of indices to search</param>
        /// <param name="lat">Latitude</param>
        /// <param name="lng">Longitude</param>
        /// <param name="range">Search radius in kilometers</param>
        /// <param name="count">Maximum number of neighbors that can be returned (default 100) (optional)</param>
        /// <param name="sorted">If enabled neighbors will be sorted by distance, nearest to furthest (default false) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryRangeManyResponse</returns>
        public async System.Threading.Tasks.Task<QueryRangeManyResponse> QueryRangeManyAsync(List<string> indices, double lat, double lng, int range, int? count = default(int?), bool? sorted = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GeoproxClient.Client.ApiResponse<QueryRangeManyResponse> localVarResponse = await QueryRangeManyWithHttpInfoAsync(indices, lat, lng, range, count, sorted, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search multiple indices for objects nearby Search geospatial many indices for all keys within some distance
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indices">List of indices to search</param>
        /// <param name="lat">Latitude</param>
        /// <param name="lng">Longitude</param>
        /// <param name="range">Search radius in kilometers</param>
        /// <param name="count">Maximum number of neighbors that can be returned (default 100) (optional)</param>
        /// <param name="sorted">If enabled neighbors will be sorted by distance, nearest to furthest (default false) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryRangeManyResponse)</returns>
        public async System.Threading.Tasks.Task<GeoproxClient.Client.ApiResponse<QueryRangeManyResponse>> QueryRangeManyWithHttpInfoAsync(List<string> indices, double lat, double lng, int range, int? count = default(int?), bool? sorted = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'indices' is set
            if (indices == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'indices' when calling GeoshardApiApi->QueryRangeMany");
            }


            GeoproxClient.Client.RequestOptions localVarRequestOptions = new GeoproxClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeoproxClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GeoproxClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(GeoproxClient.Client.ClientUtils.ParameterToMultiMap("multi", "indices", indices));
            localVarRequestOptions.QueryParameters.Add(GeoproxClient.Client.ClientUtils.ParameterToMultiMap("", "lat", lat));
            localVarRequestOptions.QueryParameters.Add(GeoproxClient.Client.ClientUtils.ParameterToMultiMap("", "lng", lng));
            localVarRequestOptions.QueryParameters.Add(GeoproxClient.Client.ClientUtils.ParameterToMultiMap("", "range", range));
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeoproxClient.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (sorted != null)
            {
                localVarRequestOptions.QueryParameters.Add(GeoproxClient.Client.ClientUtils.ParameterToMultiMap("", "sorted", sorted));
            }

            localVarRequestOptions.Operation = "GeoshardApiApi.QueryRangeMany";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<QueryRangeManyResponse>("/api/v1/shard/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryRangeMany", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove key from index Removes key from geospatial index
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="removeKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveKeyResponse</returns>
        public RemoveKeyResponse RemoveKey(string index, RemoveKey removeKey, int operationIndex = 0)
        {
            GeoproxClient.Client.ApiResponse<RemoveKeyResponse> localVarResponse = RemoveKeyWithHttpInfo(index, removeKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove key from index Removes key from geospatial index
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="removeKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveKeyResponse</returns>
        public GeoproxClient.Client.ApiResponse<RemoveKeyResponse> RemoveKeyWithHttpInfo(string index, RemoveKey removeKey, int operationIndex = 0)
        {
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'index' when calling GeoshardApiApi->RemoveKey");
            }

            // verify the required parameter 'removeKey' is set
            if (removeKey == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'removeKey' when calling GeoshardApiApi->RemoveKey");
            }

            GeoproxClient.Client.RequestOptions localVarRequestOptions = new GeoproxClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeoproxClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GeoproxClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("index", GeoproxClient.Client.ClientUtils.ParameterToString(index)); // path parameter
            localVarRequestOptions.Data = removeKey;

            localVarRequestOptions.Operation = "GeoshardApiApi.RemoveKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<RemoveKeyResponse>("/api/v1/shard/{index}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove key from index Removes key from geospatial index
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="removeKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveKeyResponse</returns>
        public async System.Threading.Tasks.Task<RemoveKeyResponse> RemoveKeyAsync(string index, RemoveKey removeKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GeoproxClient.Client.ApiResponse<RemoveKeyResponse> localVarResponse = await RemoveKeyWithHttpInfoAsync(index, removeKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove key from index Removes key from geospatial index
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="removeKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveKeyResponse)</returns>
        public async System.Threading.Tasks.Task<GeoproxClient.Client.ApiResponse<RemoveKeyResponse>> RemoveKeyWithHttpInfoAsync(string index, RemoveKey removeKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'index' when calling GeoshardApiApi->RemoveKey");
            }

            // verify the required parameter 'removeKey' is set
            if (removeKey == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'removeKey' when calling GeoshardApiApi->RemoveKey");
            }


            GeoproxClient.Client.RequestOptions localVarRequestOptions = new GeoproxClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeoproxClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GeoproxClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("index", GeoproxClient.Client.ClientUtils.ParameterToString(index)); // path parameter
            localVarRequestOptions.Data = removeKey;

            localVarRequestOptions.Operation = "GeoshardApiApi.RemoveKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<RemoveKeyResponse>("/api/v1/shard/{index}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove multiple keys from index Removes multiple keys from geospatial index
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="removeKeyBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveKeyBatchResponse</returns>
        public RemoveKeyBatchResponse RemoveKeyBatch(string index, RemoveKeyBatch removeKeyBatch, int operationIndex = 0)
        {
            GeoproxClient.Client.ApiResponse<RemoveKeyBatchResponse> localVarResponse = RemoveKeyBatchWithHttpInfo(index, removeKeyBatch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove multiple keys from index Removes multiple keys from geospatial index
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="removeKeyBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveKeyBatchResponse</returns>
        public GeoproxClient.Client.ApiResponse<RemoveKeyBatchResponse> RemoveKeyBatchWithHttpInfo(string index, RemoveKeyBatch removeKeyBatch, int operationIndex = 0)
        {
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'index' when calling GeoshardApiApi->RemoveKeyBatch");
            }

            // verify the required parameter 'removeKeyBatch' is set
            if (removeKeyBatch == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'removeKeyBatch' when calling GeoshardApiApi->RemoveKeyBatch");
            }

            GeoproxClient.Client.RequestOptions localVarRequestOptions = new GeoproxClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeoproxClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GeoproxClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("index", GeoproxClient.Client.ClientUtils.ParameterToString(index)); // path parameter
            localVarRequestOptions.Data = removeKeyBatch;

            localVarRequestOptions.Operation = "GeoshardApiApi.RemoveKeyBatch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<RemoveKeyBatchResponse>("/api/v1/shard/{index}/batch/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveKeyBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove multiple keys from index Removes multiple keys from geospatial index
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="removeKeyBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveKeyBatchResponse</returns>
        public async System.Threading.Tasks.Task<RemoveKeyBatchResponse> RemoveKeyBatchAsync(string index, RemoveKeyBatch removeKeyBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GeoproxClient.Client.ApiResponse<RemoveKeyBatchResponse> localVarResponse = await RemoveKeyBatchWithHttpInfoAsync(index, removeKeyBatch, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove multiple keys from index Removes multiple keys from geospatial index
        /// </summary>
        /// <exception cref="GeoproxClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Geospatial index name</param>
        /// <param name="removeKeyBatch"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveKeyBatchResponse)</returns>
        public async System.Threading.Tasks.Task<GeoproxClient.Client.ApiResponse<RemoveKeyBatchResponse>> RemoveKeyBatchWithHttpInfoAsync(string index, RemoveKeyBatch removeKeyBatch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'index' when calling GeoshardApiApi->RemoveKeyBatch");
            }

            // verify the required parameter 'removeKeyBatch' is set
            if (removeKeyBatch == null)
            {
                throw new GeoproxClient.Client.ApiException(400, "Missing required parameter 'removeKeyBatch' when calling GeoshardApiApi->RemoveKeyBatch");
            }


            GeoproxClient.Client.RequestOptions localVarRequestOptions = new GeoproxClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GeoproxClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GeoproxClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("index", GeoproxClient.Client.ClientUtils.ParameterToString(index)); // path parameter
            localVarRequestOptions.Data = removeKeyBatch;

            localVarRequestOptions.Operation = "GeoshardApiApi.RemoveKeyBatch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<RemoveKeyBatchResponse>("/api/v1/shard/{index}/batch/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveKeyBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
