/*
 * geoprox-server
 *
 * Geoprox server implementation providing a HTTP API for geospatial queries and position tracking
 *
 * The version of the OpenAPI document: 0.4.1
 * Contact: singhezra@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GeoproxClient.Client.OpenAPIDateConverter;

namespace GeoproxClient.Model
{
    /// <summary>
    /// Returns geohash decoded as latitude/longitude with precision errors
    /// </summary>
    [DataContract(Name = "DecodeGeohashResponse")]
    public partial class DecodeGeohashResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DecodeGeohashResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DecodeGeohashResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DecodeGeohashResponse" /> class.
        /// </summary>
        /// <param name="lat">Latitude (required).</param>
        /// <param name="latError">Latitude error (required).</param>
        /// <param name="lng">Longitude (required).</param>
        /// <param name="lngError">Longitude error (required).</param>
        public DecodeGeohashResponse(double lat = default(double), double latError = default(double), double lng = default(double), double lngError = default(double))
        {
            this.Lat = lat;
            this.LatError = latError;
            this.Lng = lng;
            this.LngError = lngError;
        }

        /// <summary>
        /// Latitude
        /// </summary>
        /// <value>Latitude</value>
        [DataMember(Name = "lat", IsRequired = true, EmitDefaultValue = true)]
        public double Lat { get; set; }

        /// <summary>
        /// Latitude error
        /// </summary>
        /// <value>Latitude error</value>
        [DataMember(Name = "lat_error", IsRequired = true, EmitDefaultValue = true)]
        public double LatError { get; set; }

        /// <summary>
        /// Longitude
        /// </summary>
        /// <value>Longitude</value>
        [DataMember(Name = "lng", IsRequired = true, EmitDefaultValue = true)]
        public double Lng { get; set; }

        /// <summary>
        /// Longitude error
        /// </summary>
        /// <value>Longitude error</value>
        [DataMember(Name = "lng_error", IsRequired = true, EmitDefaultValue = true)]
        public double LngError { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DecodeGeohashResponse {\n");
            sb.Append("  Lat: ").Append(Lat).Append("\n");
            sb.Append("  LatError: ").Append(LatError).Append("\n");
            sb.Append("  Lng: ").Append(Lng).Append("\n");
            sb.Append("  LngError: ").Append(LngError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
