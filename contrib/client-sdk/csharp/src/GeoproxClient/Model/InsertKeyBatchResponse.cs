/*
 * geoprox-server
 *
 * Geoprox server implementation providing a HTTP API for geospatial queries and position tracking
 *
 * The version of the OpenAPI document: 0.4.2
 * Contact: singhezra@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GeoproxClient.Client.OpenAPIDateConverter;

namespace GeoproxClient.Model
{
    /// <summary>
    /// Returns results and errors of batch key insert
    /// </summary>
    [DataContract(Name = "InsertKeyBatchResponse")]
    public partial class InsertKeyBatchResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InsertKeyBatchResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InsertKeyBatchResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InsertKeyBatchResponse" /> class.
        /// </summary>
        /// <param name="errors">Contains information about which keys failed to be inserted and the associated error details. (required).</param>
        /// <param name="results">Object keys that have been inserted in the index and their geohash. (required).</param>
        public InsertKeyBatchResponse(Dictionary<string, string> errors = default(Dictionary<string, string>), Dictionary<string, string> results = default(Dictionary<string, string>))
        {
            // to ensure "errors" is required (not null)
            if (errors == null)
            {
                throw new ArgumentNullException("errors is a required property for InsertKeyBatchResponse and cannot be null");
            }
            this.Errors = errors;
            // to ensure "results" is required (not null)
            if (results == null)
            {
                throw new ArgumentNullException("results is a required property for InsertKeyBatchResponse and cannot be null");
            }
            this.Results = results;
        }

        /// <summary>
        /// Contains information about which keys failed to be inserted and the associated error details.
        /// </summary>
        /// <value>Contains information about which keys failed to be inserted and the associated error details.</value>
        [DataMember(Name = "errors", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> Errors { get; set; }

        /// <summary>
        /// Object keys that have been inserted in the index and their geohash.
        /// </summary>
        /// <value>Object keys that have been inserted in the index and their geohash.</value>
        [DataMember(Name = "results", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> Results { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InsertKeyBatchResponse {\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
